# This is an adapted version of the ILI934X driver as below.
# It works with multiple fonts and also works with the esp32 H/W SPI implementation
# Also includes a word wrap print function
# Proportional fonts are generated by Peter Hinch's Font-to-py
# MIT License; Copyright (c) 2017 Jeffrey N. Magee

# This file is part of MicroPython ILI934X driver
# Copyright (c) 2016 - 2017 Radomir Dopieralski, Mika Tuupola
#
# Licensed under the MIT license:
#   http://www.opensource.org/licenses/mit-license.php
#
# Project home:
#   https://github.com/tuupola/micropython-ili934x


class AdafruitGFX5x7Font:
    # Original Adafruit_GFX 5x7 font data stored as a single bytes object.
    _font = (
        b"\x00\x00\x00\x00\x00"
        b"\x3e\x5b\x4f\x5b\x3e"
        b"\x3e\x6b\x4f\x6b\x3e"
        b"\x1c\x3e\x7c\x3e\x1c"
        b"\x18\x3c\x7e\x3c\x18"
        b"\x1c\x57\x7d\x57\x1c"
        b"\x1c\x5e\x7f\x5e\x1c"
        b"\x00\x18\x3c\x18\x00"
        b"\xff\xe7\xc3\xe7\xff"
        b"\x00\x18\x24\x18\x00"
        b"\xff\xe7\xdb\xe7\xff"
        b"\x30\x48\x3a\x06\x0e"
        b"\x26\x29\x79\x29\x26"
        b"\x40\x7f\x05\x05\x07"
        b"\x40\x7f\x05\x25\x3f"
        b"\x5a\x3c\xe7\x3c\x5a"
        b"\x7f\x3e\x1c\x1c\x08"
        b"\x08\x1c\x1c\x3e\x7f"
        b"\x14\x22\x7f\x22\x14"
        b"\x5f\x5f\x00\x5f\x5f"
        b"\x06\x09\x7f\x01\x7f"
        b"\x00\x66\x89\x95\x6a"
        b"\x60\x60\x60\x60\x60"
        b"\x94\xa2\xff\xa2\x94"
        b"\x08\x04\x7e\x04\x08"
        b"\x10\x20\x7e\x20\x10"
        b"\x08\x08\x2a\x1c\x08"
        b"\x08\x1c\x2a\x08\x08"
        b"\x1e\x10\x10\x10\x10"
        b"\x0c\x1e\x0c\x1e\x0c"
        b"\x30\x38\x3e\x38\x30"
        b"\x06\x0e\x3e\x0e\x06"
        b"\x00\x00\x00\x00\x00"
        b"\x00\x00\x5f\x00\x00"
        b"\x00\x07\x00\x07\x00"
        b"\x14\x7f\x14\x7f\x14"
        b"\x24\x2a\x7f\x2a\x12"
        b"\x23\x13\x08\x64\x62"
        b"\x36\x49\x56\x20\x50"
        b"\x00\x08\x07\x03\x00"
        b"\x00\x1c\x22\x41\x00"
        b"\x00\x41\x22\x1c\x00"
        b"\x2a\x1c\x7f\x1c\x2a"
        b"\x08\x08\x3e\x08\x08"
        b"\x00\x80\x70\x30\x00"
        b"\x08\x08\x08\x08\x08"
        b"\x00\x00\x60\x60\x00"
        b"\x20\x10\x08\x04\x02"
        b"\x3e\x51\x49\x45\x3e"
        b"\x00\x42\x7f\x40\x00"
        b"\x72\x49\x49\x49\x46"
        b"\x21\x41\x49\x4d\x33"
        b"\x18\x14\x12\x7f\x10"
        b"\x27\x45\x45\x45\x39"
        b"\x3c\x4a\x49\x49\x31"
        b"\x41\x21\x11\x09\x07"
        b"\x36\x49\x49\x49\x36"
        b"\x46\x49\x49\x29\x1e"
        b"\x00\x00\x14\x00\x00"
        b"\x00\x40\x34\x00\x00"
        b"\x00\x08\x14\x22\x41"
        b"\x14\x14\x14\x14\x14"
        b"\x00\x41\x22\x14\x08"
        b"\x02\x01\x59\x09\x06"
        b"\x3e\x41\x5d\x59\x4e"
        b"\x7c\x12\x11\x12\x7c"
        b"\x7f\x49\x49\x49\x36"
        b"\x3e\x41\x41\x41\x22"
        b"\x7f\x41\x41\x41\x3e"
        b"\x7f\x49\x49\x49\x41"
        b"\x7f\x09\x09\x09\x01"
        b"\x3e\x41\x41\x51\x73"
        b"\x7f\x08\x08\x08\x7f"
        b"\x00\x41\x7f\x41\x00"
        b"\x20\x40\x41\x3f\x01"
        b"\x7f\x08\x14\x22\x41"
        b"\x7f\x40\x40\x40\x40"
        b"\x7f\x02\x1c\x02\x7f"
        b"\x7f\x04\x08\x10\x7f"
        b"\x3e\x41\x41\x41\x3e"
        b"\x7f\x09\x09\x09\x06"
        b"\x3e\x41\x51\x21\x5e"
        b"\x7f\x09\x19\x29\x46"
        b"\x26\x49\x49\x49\x32"
        b"\x03\x01\x7f\x01\x03"
        b"\x3f\x40\x40\x40\x3f"
        b"\x1f\x20\x40\x20\x1f"
        b"\x3f\x40\x38\x40\x3f"
        b"\x63\x14\x08\x14\x63"
        b"\x03\x04\x78\x04\x03"
        b"\x61\x59\x49\x4d\x43"
        b"\x00\x7f\x41\x41\x41"
        b"\x02\x04\x08\x10\x20"
        b"\x00\x41\x41\x41\x7f"
        b"\x04\x02\x01\x02\x04"
        b"\x40\x40\x40\x40\x40"
        b"\x00\x03\x07\x08\x00"
        b"\x20\x54\x54\x78\x40"
        b"\x7f\x28\x44\x44\x38"
        b"\x38\x44\x44\x44\x28"
        b"\x38\x44\x44\x28\x7f"
        b"\x38\x54\x54\x54\x18"
        b"\x00\x08\x7e\x09\x02"
        b"\x18\xa4\xa4\x9c\x78"
        b"\x7f\x08\x04\x04\x78"
        b"\x00\x44\x7d\x40\x00"
        b"\x20\x40\x40\x3d\x00"
        b"\x7f\x10\x28\x44\x00"
        b"\x00\x41\x7f\x40\x00"
        b"\x7c\x04\x78\x04\x78"
        b"\x7c\x08\x04\x04\x78"
        b"\x38\x44\x44\x44\x38"
        b"\xfc\x18\x24\x24\x18"
        b"\x18\x24\x24\x18\xfc"
        b"\x7c\x08\x04\x04\x08"
        b"\x48\x54\x54\x54\x24"
        b"\x04\x04\x3f\x44\x24"
        b"\x3c\x40\x40\x20\x7c"
        b"\x1c\x20\x40\x20\x1c"
        b"\x3c\x40\x30\x40\x3c"
        b"\x44\x28\x10\x28\x44"
        b"\x4c\x90\x90\x90\x7c"
        b"\x44\x64\x54\x4c\x44"
        b"\x00\x08\x36\x41\x00"
        b"\x00\x00\x77\x00\x00"
        b"\x00\x41\x36\x08\x00"
        b"\x02\x01\x02\x04\x02"
        b"\x3c\x26\x23\x26\x3c"
        b"\x1e\xa1\xa1\x61\x12"
        b"\x3a\x40\x40\x20\x7a"
        b"\x38\x54\x54\x55\x59"
        b"\x21\x55\x55\x79\x41"
        b"\x21\x54\x54\x78\x41"
        b"\x21\x55\x54\x78\x40"
        b"\x20\x54\x55\x79\x40"
        b"\x0c\x1e\x52\x72\x12"
        b"\x39\x55\x55\x55\x59"
        b"\x39\x54\x54\x54\x59"
        b"\x39\x55\x54\x54\x58"
        b"\x00\x00\x45\x7c\x41"
        b"\x00\x02\x45\x7d\x42"
        b"\x00\x01\x45\x7c\x40"
        b"\xf0\x29\x24\x29\xf0"
        b"\xf0\x28\x25\x28\xf0"
        b"\x7c\x54\x55\x45\x00"
        b"\x20\x54\x54\x7c\x54"
        b"\x7c\x0a\x09\x7f\x49"
        b"\x32\x49\x49\x49\x32"
        b"\x32\x48\x48\x48\x32"
        b"\x32\x4a\x48\x48\x30"
        b"\x3a\x41\x41\x21\x7a"
        b"\x3a\x42\x40\x20\x78"
        b"\x00\x9d\xa0\xa0\x7d"
        b"\x39\x44\x44\x44\x39"
        b"\x3d\x40\x40\x40\x3d"
        b"\x3c\x24\xff\x24\x24"
        b"\x48\x7e\x49\x43\x66"
        b"\x2b\x2f\xfc\x2f\x2b"
        b"\xff\x09\x29\xf6\x20"
        b"\xc0\x88\x7e\x09\x03"
        b"\x20\x54\x54\x79\x41"
        b"\x00\x00\x44\x7d\x41"
        b"\x30\x48\x48\x4a\x32"
        b"\x38\x40\x40\x22\x7a"
        b"\x00\x7a\x0a\x0a\x72"
        b"\x7d\x0d\x19\x31\x7d"
        b"\x26\x29\x29\x2f\x28"
        b"\x26\x29\x29\x29\x26"
        b"\x30\x48\x4d\x40\x20"
        b"\x38\x08\x08\x08\x08"
        b"\x08\x08\x08\x08\x38"
        b"\x2f\x10\xc8\xac\xba"
        b"\x2f\x10\x28\x34\xfa"
        b"\x00\x00\x7b\x00\x00"
        b"\x08\x14\x2a\x14\x22"
        b"\x22\x14\x2a\x14\x08"
        b"\xaa\x00\x55\x00\xaa"
        b"\xaa\x55\xaa\x55\xaa"
        b"\x00\x00\x00\xff\x00"
        b"\x10\x10\x10\xff\x00"
        b"\x14\x14\x14\xff\x00"
        b"\x10\x10\xff\x00\xff"
        b"\x10\x10\xf0\x10\xf0"
        b"\x14\x14\x14\xfc\x00"
        b"\x14\x14\xf7\x00\xff"
        b"\x00\x00\xff\x00\xff"
        b"\x14\x14\xf4\x04\xfc"
        b"\x14\x14\x17\x10\x1f"
        b"\x10\x10\x1f\x10\x1f"
        b"\x14\x14\x14\x1f\x00"
        b"\x10\x10\x10\xf0\x00"
        b"\x00\x00\x00\x1f\x10"
        b"\x10\x10\x10\x1f\x10"
        b"\x10\x10\x10\xf0\x10"
        b"\x00\x00\x00\xff\x10"
        b"\x10\x10\x10\x10\x10"
        b"\x10\x10\x10\xff\x10"
        b"\x00\x00\x00\xff\x14"
        b"\x00\x00\xff\x00\xff"
        b"\x00\x00\x1f\x10\x17"
        b"\x00\x00\xfc\x04\xf4"
        b"\x14\x14\x17\x10\x17"
        b"\x14\x14\xf4\x04\xf4"
        b"\x00\x00\xff\x00\xf7"
        b"\x14\x14\x14\x14\x14"
        b"\x14\x14\xf7\x00\xf7"
        b"\x14\x14\x14\x17\x14"
        b"\x10\x10\x1f\x10\x1f"
        b"\x14\x14\x14\xf4\x14"
        b"\x10\x10\xf0\x10\xf0"
        b"\x00\x00\x1f\x10\x1f"
        b"\x00\x00\x00\x1f\x14"
        b"\x00\x00\x00\xfc\x14"
        b"\x00\x00\xf0\x10\xf0"
        b"\x10\x10\xff\x10\xff"
        b"\x14\x14\x14\xff\x14"
        b"\x10\x10\x10\x1f\x00"
        b"\x00\x00\x00\xf0\x10"
        b"\xff\xff\xff\xff\xff"
        b"\xf0\xf0\xf0\xf0\xf0"
        b"\xff\xff\xff\x00\x00"
        b"\x00\x00\x00\xff\xff"
        b"\x0f\x0f\x0f\x0f\x0f"
        b"\x38\x44\x44\x38\x44"
        b"\x7c\x2a\x2a\x3e\x14"
        b"\x7e\x02\x02\x06\x06"
        b"\x02\x7e\x02\x7e\x02"
        b"\x63\x55\x49\x41\x63"
        b"\x38\x44\x44\x3c\x04"
        b"\x40\x7e\x20\x1e\x20"
        b"\x06\x02\x7e\x02\x02"
        b"\x99\xa5\xe7\xa5\x99"
        b"\x1c\x2a\x49\x2a\x1c"
        b"\x4c\x72\x01\x72\x4c"
        b"\x30\x4a\x4d\x4d\x30"
        b"\x30\x48\x78\x48\x30"
        b"\xbc\x62\x5a\x46\x3d"
        b"\x3e\x49\x49\x49\x00"
        b"\x7e\x01\x01\x01\x7e"
        b"\x2a\x2a\x2a\x2a\x2a"
        b"\x44\x44\x5f\x44\x44"
        b"\x40\x51\x4a\x44\x40"
        b"\x40\x44\x4a\x51\x40"
        b"\x00\x00\xff\x01\x03"
        b"\xe0\x80\xff\x00\x00"
        b"\x08\x08\x6b\x6b\x08"
        b"\x36\x12\x36\x24\x36"
        b"\x06\x0f\x09\x0f\x06"
        b"\x00\x00\x18\x18\x00"
        b"\x00\x00\x10\x10\x00"
        b"\x30\x40\xff\x01\x01"
        b"\x00\x1f\x01\x01\x1e"
        b"\x00\x19\x1d\x17\x12"
        b"\x00\x3c\x3c\x3c\x3c"
        b"\x00\x00\x00\x00\x00"
    )

    # Create a memoryview for fast slicing.
    _mvfont = memoryview(_font)

    @classmethod
    def height(cls):
        """Return the height of the font."""
        return 8

    @classmethod
    def max_width(cls):
        """Return the maximum width of a character in the font."""
        return 6

    @classmethod
    def hmap(cls):
        """Return the hmap property (unused in this font)."""
        return False

    @classmethod
    def reverse(cls):
        """Return whether the font is reversed."""
        return False

    @classmethod
    def monospaced(cls):
        """Return whether the font is monospaced."""
        return True

    @classmethod
    def min_ch(cls):
        """Return the minimum character code in the font."""
        return 0

    @classmethod
    def max_ch(cls):
        """Return the maximum character code in the font."""
        return 255

    @classmethod
    def get_width(cls, s):
        """
        Get the width in pixels of the string `s`.

        Since each character is 6 pixels wide, this is simply:
            len(s) * 6
        """
        return len(s) * 6

    @classmethod
    def get_ch(cls, ch):
        """
        Retrieve the bitmap for the character `ch`.

        The font stores 5 bytes per character. The returned bytearray is 6 bytes
        long, with the first byte set to 0 (for spacing) and the following 5 bytes
        copied from the font data.

        Returns:
            A tuple of (bytearray, width), where width is always 6.
        """
        ordch = ord(ch)
        offset = ordch * 5
        buf = bytearray(6)
        buf[0] = 0
        buf[1:] = cls._mvfont[offset : offset + 5]
        return buf, 6
